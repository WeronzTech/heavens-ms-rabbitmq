version: "3.8"

services:
  # ===================================================================
  #  1. Infrastructure Services
  # ===================================================================
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    ports:
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - heavens-ms-js-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - heavens-ms-js-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ===================================================================
  #  2. Application Microservices with Health Checks for Zero Downtime
  # ===================================================================
  api-gateway:
    image: akhilbeliever001222/heavens-ms:latest
    command: pm2-runtime ecosystem.config.cjs --only api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - heavens-ms-js-net
    env_file: ./.env
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }
      auth-service: { condition: service_healthy }
      client-service: { condition: service_healthy }
      user-service: { condition: service_healthy }
      property-service: { condition: service_healthy }
      inventory-service: { condition: service_healthy }
      socket-service: { condition: service_healthy }
      notification-service: { condition: service_healthy }
      accounts-service: { condition: service_healthy }

  auth-service:
    image: akhilbeliever001222/heavens-ms:latest
    command: pm2-runtime ecosystem.config.cjs --only auth-service
    restart: unless-stopped
    expose:
      - "5001"
    networks:
      - heavens-ms-js-net
    env_file: ./.env
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq: { condition: service_healthy }

  client-service:
    image: akhilbeliever001222/heavens-ms:latest
    command: pm2-runtime ecosystem.config.cjs --only client-service
    restart: unless-stopped
    expose:
      - "5002"
    networks:
      - heavens-ms-js-net
    env_file: ./.env
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq: { condition: service_healthy }

  user-service:
    image: akhilbeliever001222/heavens-ms:latest
    command: pm2-runtime ecosystem.config.cjs --only user-service
    restart: unless-stopped
    expose:
      - "5003"
    networks:
      - heavens-ms-js-net
    env_file: ./.env
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq: { condition: service_healthy }

  property-service:
    image: akhilbeliever001222/heavens-ms:latest
    command: pm2-runtime ecosystem.config.cjs --only property-service
    restart: unless-stopped
    expose:
      - "5004"
    networks:
      - heavens-ms-js-net
    env_file: ./.env
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq: { condition: service_healthy }

  inventory-service:
    image: akhilbeliever001222/heavens-ms:latest
    command: pm2-runtime ecosystem.config.cjs --only inventory-service
    restart: unless-stopped
    expose:
      - "5005"
    networks:
      - heavens-ms-js-net
    env_file: ./.env
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq: { condition: service_healthy }

  socket-service:
    image: akhilbeliever001222/heavens-ms:latest
    command: pm2-runtime ecosystem.config.cjs --only socket-service
    restart: unless-stopped
    expose:
      - "5006"
    networks:
      - heavens-ms-js-net
    env_file: ./.env
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }

  notification-service:
    image: akhilbeliever001222/heavens-ms:latest
    command: pm2-runtime ecosystem.config.cjs --only notification-service
    restart: unless-stopped
    expose:
      - "5007"
    networks:
      - heavens-ms-js-net
    env_file: ./.env
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq: { condition: service_healthy }

  accounts-service:
    image: akhilbeliever001222/heavens-ms:latest
    command: pm2-runtime ecosystem.config.cjs --only accounts-service
    restart: unless-stopped
    expose:
      - "5008"
    networks:
      - heavens-ms-js-net
    env_file: ./.env
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      rabbitmq: { condition: service_healthy }

# ===================================================================
#  3. Networks and Volumes
# ===================================================================
networks:
  heavens-ms-js-net:
    driver: bridge

volumes:
  rabbitmq-data:
