version: "3.8"

# ===================================================================
#  YAML Anchor for Zero-Downtime Deployment Configuration
# ===================================================================
x-deploy-config: &deploy-config
  deploy:
    update_config:
      parallelism: 1
      delay: 10s
      order: start-first
      failure_action: rollback
    restart_policy:
      condition: on-failure

services:
  # ===================================================================
  #  1. The NGINX Proxy (The new entry point for all backend traffic)
  # ===================================================================
  nginx_proxy:
    build: ./nginx
    container_name: nginx_proxy_develop
    image: heavensliving/heavens-ms-proxy:latest # New image for the proxy
    restart: unless-stopped
    ports:
      - "8080:80" # Maps host port 8080 to this container's internal port 80
    networks:
      - heavens-ms-js-net
    depends_on:
      - api-gateway
      # Add other services here if the proxy needs to wait for them

  # ===================================================================
  #  2. Application Microservices (Now proxied internally)
  # ===================================================================
  api-gateway:
    image: heavensliving/heavens-ms:latest
    <<: *deploy-config
    command: pm2-runtime ecosystem.config.cjs --only api-gateway
    # NOTE: The 'ports' section is REMOVED. It is no longer exposed to the host.
    expose:
      - "8080" # Exposes the port internally for the nginx_proxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - heavens-ms-js-net
    env_file: ./.env
    environment:
      - NODE_ENV=production
    depends_on:
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }
      auth-service: { condition: service_started }
      client-service: { condition: service_started }
      user-service: { condition: service_started }
      property-service: { condition: service_started }
      inventory-service: { condition: service_started }
      socket-service: { condition: service_started }
      notification-service: { condition: service_started }
      accounts-service: { condition: service_started }

  auth-service:
    image: heavensliving/heavens-ms:latest
    <<: *deploy-config
    command: pm2-runtime ecosystem.config.cjs --only auth-service
    expose: ["8080"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: ["heavens-ms-js-net"]
    env_file: ./.env
    environment: { NODE_ENV: production }
    depends_on: { rabbitmq: { condition: service_healthy } }

  client-service:
    image: heavensliving/heavens-ms:latest
    <<: *deploy-config
    command: pm2-runtime ecosystem.config.cjs --only client-service
    expose: ["8080"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: ["heavens-ms-js-net"]
    env_file: ./.env
    environment: { NODE_ENV: production }
    depends_on: { rabbitmq: { condition: service_healthy } }

  user-service:
    image: heavensliving/heavens-ms:latest
    <<: *deploy-config
    command: pm2-runtime ecosystem.config.cjs --only user-service
    expose: ["8080"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: ["heavens-ms-js-net"]
    env_file: ./.env
    environment: { NODE_ENV: production }
    depends_on: { rabbitmq: { condition: service_healthy } }

  property-service:
    image: heavensliving/heavens-ms:latest
    <<: *deploy-config
    command: pm2-runtime ecosystem.config.cjs --only property-service
    expose: ["8080"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: ["heavens-ms-js-net"]
    env_file: ./.env
    environment: { NODE_ENV: production }
    depends_on: { rabbitmq: { condition: service_healthy } }

  inventory-service:
    image: heavensliving/heavens-ms:latest
    <<: *deploy-config
    command: pm2-runtime ecosystem.config.cjs --only inventory-service
    expose: ["8080"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: ["heavens-ms-js-net"]
    env_file: ./.env
    environment: { NODE_ENV: production }
    depends_on: { rabbitmq: { condition: service_healthy } }

  socket-service:
    image: heavensliving/heavens-ms:latest
    <<: *deploy-config
    command: pm2-runtime ecosystem.config.cjs --only socket-service
    expose: ["5006"] # Assuming socket service runs on a different port
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: ["heavens-ms-js-net"]
    env_file: ./.env
    environment: { NODE_ENV: production }
    depends_on:
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }

  notification-service:
    image: heavensliving/heavens-ms:latest
    <<: *deploy-config
    command: pm2-runtime ecosystem.config.cjs --only notification-service
    expose: ["8080"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: ["heavens-ms-js-net"]
    env_file: ./.env
    environment: { NODE_ENV: production }
    depends_on: { rabbitmq: { condition: service_healthy } }

  accounts-service:
    image: heavensliving/heavens-ms:latest
    <<: *deploy-config
    command: pm2-runtime ecosystem.config.cjs --only accounts-service
    expose: ["8080"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: ["heavens-ms-js-net"]
    env_file: ./.env
    environment: { NODE_ENV: production }
    depends_on: { rabbitmq: { condition: service_healthy } }

  # ===================================================================
  #  3. Infrastructure (No Changes)
  # ===================================================================
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    ports:
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - heavens-ms-js-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - heavens-ms-js-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

networks:
  heavens-ms-js-net:
    driver: bridge

volumes:
  rabbitmq-data:
