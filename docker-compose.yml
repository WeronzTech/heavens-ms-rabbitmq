# Define a reusable service template for all Node.js microservices
# This keeps the configuration DRY (Don't Repeat Yourself)
x-node-service: &node-service
  build:
    context: .
    dockerfile: Dockerfile
  volumes:
    # Mount the entire project directory for live-reloading in development.
    - .:/app
    # Use the node_modules from the container, don't overwrite it from the host.
    - /app/node_modules
  env_file:
    - ./.env
  environment:
    - NODE_ENV=development
    - CHOKIDAR_USEPOLLING=true # Helps nodemon detect file changes inside Docker
    - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
  networks:
    - heavens-ms-js-net
  restart: unless-stopped

services:
  # ===================================================================
  #  1. API Gateway (The only service exposed to the outside world)
  # ===================================================================
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    ports:
      - "15672:15672" # Management UI
      - "5672:5672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - heavens-ms-js-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - heavens-ms-js-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  api-gateway:
    <<: *node-service # Inherit the common configuration
    command: ["npm", "run", "api-gateway"]
    ports:
      - "8080:8080" # Expose to host machine
    depends_on:
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }
      auth-service: { condition: service_started }
      client-service: { condition: service_started }
      user-service: { condition: service_started }
      property-service: { condition: service_started }
      inventory-service: { condition: service_started }
      socket-service: { condition: service_started }
      notification-service: { condition: service_started }
      accounts-service: { condition: service_started }

  # ===================================================================
  #  2. Application Microservices (Internal only)
  # ===================================================================
  auth-service:
    <<: *node-service
    command: ["npm", "run", "auth-service"]
    depends_on:
      rabbitmq: { condition: service_healthy }

  client-service:
    <<: *node-service
    command: ["npm", "run", "client-service"]
    depends_on:
      rabbitmq: { condition: service_healthy }

  user-service:
    <<: *node-service
    command: ["npm", "run", "user-service"]
    depends_on:
      rabbitmq: { condition: service_healthy }

  property-service:
    <<: *node-service
    command: ["npm", "run", "property-service"]
    depends_on:
      rabbitmq: { condition: service_healthy }

  inventory-service:
    <<: *node-service
    command: ["npm", "run", "inventory-service"]
    depends_on:
      rabbitmq: { condition: service_healthy }

  socket-service:
    <<: *node-service
    command: ["npm", "run", "socket-service"]
    depends_on:
      rabbitmq: { condition: service_healthy }
      redis: { condition: service_healthy }

  notification-service:
    <<: *node-service
    command: ["npm", "run", "notification-service"]
    depends_on:
      rabbitmq: { condition: service_healthy }

  accounts-service:
    <<: *node-service
    command: ["npm", "run", "accounts-service"]
    depends_on:
      rabbitmq: { condition: service_healthy }

  # ===================================================================
  #  3. Infrastructure Services
  # ===================================================================
  maildev:
    image: maildev/maildev
    ports:
      - "1080:1080" # Web UI
    networks:
      - heavens-ms-js-net

networks:
  heavens-ms-js-net:
    driver: bridge

volumes:
  rabbitmq-data:
