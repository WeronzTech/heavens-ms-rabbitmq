# ---- Stage 1: Build Stage ----
# This stage installs all dependencies and prepares the code.
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files first to leverage Docker's build cache
COPY package*.json ./

# Install ALL dependencies (including devDependencies if needed for building)
RUN npm install

# Copy the rest of your application source code
COPY . .
# If you had a build step like `npm run build`, it would go here.


# ---- Stage 2: Production Stage ----
# This stage creates the final, clean image with only what's needed to run.
FROM node:18-alpine

WORKDIR /app

# Install PM2 globally for process management
RUN npm install pm2 -g

# Copy only the production-necessary files from the 'builder' stage
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package*.json ./
COPY --from=builder /app .

# Expose the API Gateway port that the application will run on
EXPOSE 8080

# The final command to run the application.
# This will be overridden by the 'command' in your docker-compose file
# but serves as a good default.
CMD ["pm2-runtime", "ecosystem.config.cjs"]

